#!/usr/bin/env python3


import argparse
from pathlib import Path
import re

fpga_bin_header = []

# this script will take
# - bitstream file ${TOP}.bit (already in binary format) 
# - mem initialization file "ram.mem" -> convert to binary : meminit.bin
# - iomux binary file ${TOP}_iomux.bin (already generated by the generate constraints step)
# and create a ${TOP}.bin by appending:
# HEADER: <VERSION 4B><BITSTREAM SIZE 4B><BITSTREAM CRC 4B><MEMINIT SIZE 4B><MEMINIT CRC 4B><IOMUX SIZE 4B><IOMUX CRC 4B>
# BITSTREAM BINARY
# MEMINIT BINARY
# IOMUX BINARY


fpga_bin_version = 0x00000001
bitstream_size = 0
bitstream_crc = 0
meminit_size = 0
meminit_crc = 0
iomux_size = 0
iomux_crc = 0
reserved = 0


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description="combines bitstream, meminit, iomux to binary"
    )

    parser.add_argument(
        "--bitstream",
        type=Path,
        help="generated bitstream from EDA Tool",
        required=True
    )

    parser.add_argument(
        "--meminitbin",
        type=Path,
        help="MEMINIT binary",
        required=False
    )

    parser.add_argument(
        "--iomuxbin",
        type=Path,
        help="IOMUX binary",
        required=True
    )

    parser.add_argument(
        "--fpgabin",
        type=Path,
        help="combined fpga binary",
        required=True
    )

    args = parser.parse_args()

    # create bytearray for the fpga binary content
    fpga_bin_content_byte_array = bytearray()

    # create bytearray for the fpga binary header
    fpga_bin_header_byte_array = bytearray()

    ############# BITSTREAM BIN #################
    # open the bitstream and add the bytes as-is into the fpga binary
    with open(args.bitstream, 'rb') as bitstream:
        
        bitstream_size = Path(args.bitstream).stat().st_size
        fpga_bin_content_byte_array.extend(bitstream.read())
    #############################################

    # ############# MEMINIT BIN #################
    meminitbin_file_path = args.meminitbin
    meminit_size = meminitbin_file_path.stat().st_size
    with open(meminitbin_file_path, 'rb') as meminitbin:
        fpga_bin_content_byte_array.extend(meminitbin.read())
    # ###########################################
    
    ############# IOMUX BIN ################# 
    # if bitstream file == NAME.bit, then the iomux binary will be generated as:
    # NAME_iomux.bin, use this to locate the iomux binary
    iomuxbin_file_path = args.iomuxbin
    iomux_size = iomuxbin_file_path.stat().st_size
    with open(iomuxbin_file_path, 'rb') as iomuxbin:
        fpga_bin_content_byte_array.extend(iomuxbin.read())
    ###########################################

    ######### FINAL FPGA BIN HEADER ##########
    fpga_bin_header_byte_array.extend(int(fpga_bin_version).to_bytes(4, "little"))
    fpga_bin_header_byte_array.extend(int(bitstream_size).to_bytes(4, "little"))
    fpga_bin_header_byte_array.extend(int(bitstream_crc).to_bytes(4, "little"))
    fpga_bin_header_byte_array.extend(int(meminit_size).to_bytes(4, "little"))
    fpga_bin_header_byte_array.extend(int(meminit_crc).to_bytes(4, "little"))
    fpga_bin_header_byte_array.extend(int(iomux_size).to_bytes(4, "little"))
    fpga_bin_header_byte_array.extend(int(iomux_crc).to_bytes(4, "little"))
    fpga_bin_header_byte_array.extend(int(reserved).to_bytes(4, "little"))
    ##########################################
    
    ############# FINAL FPGA BIN #################
    print("fpga_bin_header_size", len(fpga_bin_header_byte_array))
    print("bitstream_size", bitstream_size)
    print("meminit_size", meminit_size)
    print("iomux_size", iomux_size)
    #print(fpga_bin_header_byte_array.hex())
    with open(args.fpgabin, 'wb') as fpgabin:
        # write the header bytes
        fpgabin.write(fpga_bin_header_byte_array)

        # write the content bytes
        fpgabin.write(fpga_bin_content_byte_array)
    print("fpga bin:", args.fpgabin, args.fpgabin.stat().st_size, "bytes")
    ###############################################